# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Webhook(BaseModel):
    """
    Webhook
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A unique identifier for the webhook.")
    version: Optional[StrictStr] = Field(default=None, description="Schema version of the payload delivered to this webhook. Can be `v1`, `v1.1` or `v2`.")
    target: StrictStr = Field(description="URL to be called when the webhook is triggered.")
    triggers: List[StrictStr] = Field(description="An array of triggers the integration is subscribed to. This property is case sensitive. [More details](https://developer.zendesk.com/api-reference/conversations/#section/Webhook-Triggers).")
    secret: Optional[StrictStr] = Field(default=None, description="Webhook secret, used to verify the origin of incoming requests.")
    include_full_user: Optional[StrictBool] = Field(default=False, description="A boolean specifying whether webhook payloads should include the complete user schema for events involving a specific user.", alias="includeFullUser")
    include_full_source: Optional[StrictBool] = Field(default=False, description="A boolean specifying whether webhook payloads should include the client and device object (when applicable).", alias="includeFullSource")
    __properties: ClassVar[List[str]] = ["id", "version", "target", "triggers", "secret", "includeFullUser", "includeFullSource"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Webhook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Webhook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "version": obj.get("version"),
            "target": obj.get("target"),
            "triggers": obj.get("triggers"),
            "secret": obj.get("secret"),
            "includeFullUser": obj.get("includeFullUser") if obj.get("includeFullUser") is not None else False,
            "includeFullSource": obj.get("includeFullSource") if obj.get("includeFullSource") is not None else False
        })
        return _obj



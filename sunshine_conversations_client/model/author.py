# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Author(BaseModel):
    """
    The author of the message.
    """ # noqa: E501
    type: StrictStr = Field(description="The author type. Either \"user\" (representing the end user)  or \"business\" (sent on behalf of the business). ")
    subtypes: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A string array that indicates the author's subtypes. Messages from \"business\" type with an \"AI\" subtype  are generated by AI and a disclaimer is appended to the text of the message sent to the customer.  For third-party channels, the disclaimer is applied for image, file, and text message types. Message with an \"activity\" subtype are generated by system activities. ")
    user_id: Optional[StrictStr] = Field(default=None, description="The id of the user. Only supported when `type` is user.", alias="userId")
    user_external_id: Optional[StrictStr] = Field(default=None, description="The externalId of the user. Only supported when `type` is user.", alias="userExternalId")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the message author.", alias="displayName")
    avatar_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2048)]] = Field(default=None, description="A custom message icon URL. The image must be JPG, PNG, or GIF format.", alias="avatarUrl")
    __properties: ClassVar[List[str]] = ["type", "subtypes", "userId", "userExternalId", "displayName", "avatarUrl"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['business', 'user']):
            raise ValueError("must be one of enum values ('business', 'user')")
        return value

    @field_validator('subtypes')
    def subtypes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['AI', 'activity']):
                raise ValueError("each list item must be one of ('AI', 'activity')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Author from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Author from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "subtypes": obj.get("subtypes"),
            "userId": obj.get("userId"),
            "userExternalId": obj.get("userExternalId"),
            "displayName": obj.get("displayName"),
            "avatarUrl": obj.get("avatarUrl")
        })
        return _obj



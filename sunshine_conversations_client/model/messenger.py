# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from sunshine_conversations_client.model.default_responder_default_responder import DefaultResponderDefaultResponder
from sunshine_conversations_client.model.integration import Integration
from sunshine_conversations_client.model.status import Status
from typing import Optional, Set
from typing_extensions import Self

class Messenger(Integration):
    """
    Messenger
    """ # noqa: E501
    default_responder_id: Optional[StrictStr] = Field(default=None, description="The default responder ID for the integration. This is the ID of the responder that will be used to send messages to the user. For more information, refer to the <a href=\"https://developer.zendesk.com/documentation/conversations/messaging-platform/programmable-conversations/switchboard/#default-integration-assignment\">Switchboard guide</a>. ", alias="defaultResponderId")
    default_responder: Optional[DefaultResponderDefaultResponder] = Field(default=None, alias="defaultResponder")
    type: Optional[StrictStr] = Field(default='messenger', description="Facebook Messenger Setup steps: - Take note of your Facebook app ID and secret (apps can be created at developer.facebook.com); - The Facebook app must have been submitted to Meta for app review with the “pages_manage_metadata” (to retrieve Page Access Tokens for the Pages, apps that the app user administers and set a webhook) and “pages_messaging” (to send messages) permissions. - In order to integrate a Facebook Messenger app you must acquire a Page Access Token from your user. Once you have acquired a page access token from your user, call the Create Integration endpoint with your app secret and ID and the user’s page access token. ")
    page_access_token: Optional[StrictStr] = Field(description="A Facebook Page Access Token.", alias="pageAccessToken")
    app_id: StrictStr = Field(description="A Facebook App ID.", alias="appId")
    app_secret: Optional[StrictStr] = Field(description="A Facebook App Secret.", alias="appSecret")
    page_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A Facebook page ID.", alias="pageId")
    page_name: Optional[StrictStr] = Field(default=None, description="A Facebook page name.", alias="pageName")
    __properties: ClassVar[List[str]] = ["id", "type", "status", "displayName", "defaultResponderId", "defaultResponder", "pageAccessToken", "appId", "appSecret", "pageId", "pageName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Messenger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_responder
        if self.default_responder:
            _dict['defaultResponder'] = self.default_responder.to_dict()
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if default_responder_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_responder_id is None and "default_responder_id" in self.model_fields_set:
            _dict['defaultResponderId'] = None

        # set to None if default_responder (nullable) is None
        # and model_fields_set contains the field
        if self.default_responder is None and "default_responder" in self.model_fields_set:
            _dict['defaultResponder'] = None

        # set to None if page_access_token (nullable) is None
        # and model_fields_set contains the field
        if self.page_access_token is None and "page_access_token" in self.model_fields_set:
            _dict['pageAccessToken'] = None

        # set to None if app_secret (nullable) is None
        # and model_fields_set contains the field
        if self.app_secret is None and "app_secret" in self.model_fields_set:
            _dict['appSecret'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Messenger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'messenger',
            "status": obj.get("status"),
            "displayName": obj.get("displayName"),
            "defaultResponderId": obj.get("defaultResponderId"),
            "defaultResponder": DefaultResponderDefaultResponder.from_dict(obj["defaultResponder"]) if obj.get("defaultResponder") is not None else None,
            "pageAccessToken": obj.get("pageAccessToken"),
            "appId": obj.get("appId"),
            "appSecret": obj.get("appSecret"),
            "pageId": obj.get("pageId"),
            "pageName": obj.get("pageName")
        })
        return _obj



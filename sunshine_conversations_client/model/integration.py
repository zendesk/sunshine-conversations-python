# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from sunshine_conversations_client.model.status import Status
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sunshine_conversations_client.model.android import Android
    from sunshine_conversations_client.model.apple import Apple
    from sunshine_conversations_client.model.custom import Custom
    from sunshine_conversations_client.model.instagram import Instagram
    from sunshine_conversations_client.model.ios import Ios
    from sunshine_conversations_client.model.line import Line
    from sunshine_conversations_client.model.mailgun import Mailgun
    from sunshine_conversations_client.model.messagebird import Messagebird
    from sunshine_conversations_client.model.messenger import Messenger
    from sunshine_conversations_client.model.telegram import Telegram
    from sunshine_conversations_client.model.twilio import Twilio
    from sunshine_conversations_client.model.twitter import Twitter
    from sunshine_conversations_client.model.unity import Unity
    from sunshine_conversations_client.model.viber import Viber
    from sunshine_conversations_client.model.web import Web
    from sunshine_conversations_client.model.whatsapp import Whatsapp

class Integration(BaseModel):
    """
    The integration.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the integration.")
    type: StrictStr
    status: Optional[Status] = None
    display_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="A human-friendly name used to identify the integration.", alias="displayName")
    __properties: ClassVar[List[str]] = ["id", "type", "status", "displayName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'android': 'Android','apple': 'Apple','custom': 'Custom','instagram': 'Instagram','ios': 'Ios','line': 'Line','mailgun': 'Mailgun','messagebird': 'Messagebird','messenger': 'Messenger','telegram': 'Telegram','twilio': 'Twilio','twitter': 'Twitter','unity': 'Unity','viber': 'Viber','web': 'Web','whatsapp': 'Whatsapp'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[Android, Apple, Custom, Instagram, Ios, Line, Mailgun, Messagebird, Messenger, Telegram, Twilio, Twitter, Unity, Viber, Web, Whatsapp]]:
        """Create an instance of Integration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[Android, Apple, Custom, Instagram, Ios, Line, Mailgun, Messagebird, Messenger, Telegram, Twilio, Twitter, Unity, Viber, Web, Whatsapp]]:
        """Create an instance of Integration from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'Android':
            return import_module("sunshine_conversations_client.model.android").Android.from_dict(obj)
        if object_type ==  'Apple':
            return import_module("sunshine_conversations_client.model.apple").Apple.from_dict(obj)
        if object_type ==  'Custom':
            return import_module("sunshine_conversations_client.model.custom").Custom.from_dict(obj)
        if object_type ==  'Instagram':
            return import_module("sunshine_conversations_client.model.instagram").Instagram.from_dict(obj)
        if object_type ==  'Ios':
            return import_module("sunshine_conversations_client.model.ios").Ios.from_dict(obj)
        if object_type ==  'Line':
            return import_module("sunshine_conversations_client.model.line").Line.from_dict(obj)
        if object_type ==  'Mailgun':
            return import_module("sunshine_conversations_client.model.mailgun").Mailgun.from_dict(obj)
        if object_type ==  'Messagebird':
            return import_module("sunshine_conversations_client.model.messagebird").Messagebird.from_dict(obj)
        if object_type ==  'Messenger':
            return import_module("sunshine_conversations_client.model.messenger").Messenger.from_dict(obj)
        if object_type ==  'Telegram':
            return import_module("sunshine_conversations_client.model.telegram").Telegram.from_dict(obj)
        if object_type ==  'Twilio':
            return import_module("sunshine_conversations_client.model.twilio").Twilio.from_dict(obj)
        if object_type ==  'Twitter':
            return import_module("sunshine_conversations_client.model.twitter").Twitter.from_dict(obj)
        if object_type ==  'Unity':
            return import_module("sunshine_conversations_client.model.unity").Unity.from_dict(obj)
        if object_type ==  'Viber':
            return import_module("sunshine_conversations_client.model.viber").Viber.from_dict(obj)
        if object_type ==  'Web':
            return import_module("sunshine_conversations_client.model.web").Web.from_dict(obj)
        if object_type ==  'Whatsapp':
            return import_module("sunshine_conversations_client.model.whatsapp").Whatsapp.from_dict(obj)

        raise ValueError("Integration failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from sunshine_conversations_client.model.conversation_message_delivery_payload_destination import ConversationMessageDeliveryPayloadDestination
from sunshine_conversations_client.model.conversation_message_delivery_payload_external_messages_inner import ConversationMessageDeliveryPayloadExternalMessagesInner
from sunshine_conversations_client.model.conversation_message_delivery_payload_message import ConversationMessageDeliveryPayloadMessage
from sunshine_conversations_client.model.conversation_truncated import ConversationTruncated
from sunshine_conversations_client.model.user import User
from typing import Optional, Set
from typing_extensions import Self

class ConversationMessageDeliveryPayload(BaseModel):
    """
    The payload of the event. The contents of this object depend on the type of event.
    """ # noqa: E501
    user: Optional[User] = Field(default=None, description="The user associated with the conversation.")
    conversation: Optional[ConversationTruncated] = Field(default=None, description="The conversation in which the message was sent.")
    message: Optional[ConversationMessageDeliveryPayloadMessage] = None
    destination: Optional[ConversationMessageDeliveryPayloadDestination] = None
    external_messages: Optional[List[ConversationMessageDeliveryPayloadExternalMessagesInner]] = Field(default=None, description="An array of objects representing the third-party messages associated with the event. The order of the external messages is not guaranteed to be the same across the different triggers. Note that some channels donâ€™t expose message IDs, in which case this field will be unset.", alias="externalMessages")
    is_final_event: Optional[StrictBool] = Field(default=None, description="A boolean indicating whether the webhook is the final one for the `message.id` and `destination.type` pair.", alias="isFinalEvent")
    __properties: ClassVar[List[str]] = ["user", "conversation", "message", "destination", "externalMessages", "isFinalEvent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversationMessageDeliveryPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversation
        if self.conversation:
            _dict['conversation'] = self.conversation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in external_messages (list)
        _items = []
        if self.external_messages:
            for _item_external_messages in self.external_messages:
                if _item_external_messages:
                    _items.append(_item_external_messages.to_dict())
            _dict['externalMessages'] = _items
        # set to None if external_messages (nullable) is None
        # and model_fields_set contains the field
        if self.external_messages is None and "external_messages" in self.model_fields_set:
            _dict['externalMessages'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversationMessageDeliveryPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "conversation": ConversationTruncated.from_dict(obj["conversation"]) if obj.get("conversation") is not None else None,
            "message": ConversationMessageDeliveryPayloadMessage.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "destination": ConversationMessageDeliveryPayloadDestination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "externalMessages": [ConversationMessageDeliveryPayloadExternalMessagesInner.from_dict(_item) for _item in obj["externalMessages"]] if obj.get("externalMessages") is not None else None,
            "isFinalEvent": obj.get("isFinalEvent")
        })
        return _obj



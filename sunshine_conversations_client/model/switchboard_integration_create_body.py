# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SwitchboardIntegrationCreateBody(BaseModel):
    """
    SwitchboardIntegrationCreateBody
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=128)] = Field(description="Identifier for use in control transfer protocols. Restricted to alphanumeric characters, `-` and `_`.")
    integration_id: Optional[StrictStr] = Field(default=None, description="The id of the integration to link to the switchboard integration. Must be used when linking a custom integration. One of `integrationId` or `integrationType` must be provided.", alias="integrationId")
    integration_type: Optional[StrictStr] = Field(default=None, description="The type of the integration to link to the switchboard integration. Must be used when linking an OAuth integration. One of `integrationId` or `integrationType` must be provided.", alias="integrationType")
    deliver_standby_events: Optional[StrictBool] = Field(default=None, description="Setting to determine if webhooks should be sent when the switchboard integration is not in control of a conversation (standby status)", alias="deliverStandbyEvents")
    next_switchboard_integration_id: Optional[StrictStr] = Field(default=None, description="The switchboard integration id to which control of a conversation is passed / offered by default.", alias="nextSwitchboardIntegrationId")
    message_history_count: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = Field(default=None, description="Number of messages to include in the message history context.", alias="messageHistoryCount")
    __properties: ClassVar[List[str]] = ["name", "integrationId", "integrationType", "deliverStandbyEvents", "nextSwitchboardIntegrationId", "messageHistoryCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SwitchboardIntegrationCreateBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if next_switchboard_integration_id (nullable) is None
        # and model_fields_set contains the field
        if self.next_switchboard_integration_id is None and "next_switchboard_integration_id" in self.model_fields_set:
            _dict['nextSwitchboardIntegrationId'] = None

        # set to None if message_history_count (nullable) is None
        # and model_fields_set contains the field
        if self.message_history_count is None and "message_history_count" in self.model_fields_set:
            _dict['messageHistoryCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SwitchboardIntegrationCreateBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "integrationId": obj.get("integrationId"),
            "integrationType": obj.get("integrationType"),
            "deliverStandbyEvents": obj.get("deliverStandbyEvents"),
            "nextSwitchboardIntegrationId": obj.get("nextSwitchboardIntegrationId"),
            "messageHistoryCount": obj.get("messageHistoryCount")
        })
        return _obj



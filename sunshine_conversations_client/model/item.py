# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sunshine_conversations_client.model.action_subset import ActionSubset
from typing import Optional, Set
from typing_extensions import Self

class Item(BaseModel):
    """
    Item
    """ # noqa: E501
    title: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(description="The title of the item.")
    description: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="The description of the item.")
    media_url: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="The image url attached to the item.", alias="mediaUrl")
    media_type: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="The MIME type for any image attached in the mediaUrl.", alias="mediaType")
    alt_text: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="An optional description of the media for accessibility purposes. The field will be saved by default with the file name as the value.", alias="altText")
    size: Optional[StrictStr] = Field(default=None, description="The size of the image.")
    actions: Annotated[List[ActionSubset], Field(min_length=1, max_length=3)] = Field(description="An array of objects representing the actions associated with the item.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. ")
    __properties: ClassVar[List[str]] = ["title", "description", "mediaUrl", "mediaType", "altText", "size", "actions", "metadata"]

    @field_validator('size')
    def size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['compact', 'large']):
            raise ValueError("must be one of enum values ('compact', 'large')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Item from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Item from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "mediaUrl": obj.get("mediaUrl"),
            "mediaType": obj.get("mediaType"),
            "altText": obj.get("altText"),
            "size": obj.get("size"),
            "actions": [ActionSubset.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "metadata": obj.get("metadata")
        })
        return _obj



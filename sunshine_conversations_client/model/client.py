# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sunshine_conversations_client.model.client_type import ClientType
from typing import Optional, Set
from typing_extensions import Self

class Client(BaseModel):
    """
    Client
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the client.")
    type: Optional[ClientType] = None
    status: Optional[StrictStr] = Field(default=None, description="The client status. Indicates if the client is able to receive messages or not. Can be pending, inactive, active, or blocked.")
    integration_id: Optional[StrictStr] = Field(default=None, description="The ID of the integration that the client was created for. Unused for clients of type sdk, as they incorporate multiple integrations.", alias="integrationId")
    external_id: Optional[StrictStr] = Field(default=None, description="The ID of the user on an external channel. For example, the userâ€™s phone number for Twilio, or their page-scoped user ID for Facebook Messenger. Applies only to non-SDK clients.", alias="externalId")
    last_seen: Optional[StrictStr] = Field(default=None, description="A datetime string with the format `YYYY-MM-DDThh:mm:ss.SSSZ` representing the last time the user interacted with this client.", alias="lastSeen")
    linked_at: Optional[StrictStr] = Field(default=None, description="A timestamp signifying when the client was added to the user. Formatted as `YYYY-MM-DDThh:mm:ss.SSSZ`.", alias="linkedAt")
    display_name: Optional[StrictStr] = Field(default=None, description="The user's display name on the channel.", alias="displayName")
    avatar_url: Optional[StrictStr] = Field(default=None, description="The URL for the user's avatar on the channel.", alias="avatarUrl")
    info: Optional[Dict[str, Any]] = Field(default=None, description="A flat curated object with properties that vary for each client platform. All keys are optional and not guaranteed to be available.")
    raw: Optional[Dict[str, Any]] = Field(default=None, description="An object with raw properties that vary for each client platform. All keys are optional and not guaranteed to be available.")
    __properties: ClassVar[List[str]] = ["id", "type", "status", "integrationId", "externalId", "lastSeen", "linkedAt", "displayName", "avatarUrl", "info", "raw"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'blocked', 'inactive', 'pending']):
            raise ValueError("must be one of enum values ('active', 'blocked', 'inactive', 'pending')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Client from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if integration_id (nullable) is None
        # and model_fields_set contains the field
        if self.integration_id is None and "integration_id" in self.model_fields_set:
            _dict['integrationId'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if last_seen (nullable) is None
        # and model_fields_set contains the field
        if self.last_seen is None and "last_seen" in self.model_fields_set:
            _dict['lastSeen'] = None

        # set to None if linked_at (nullable) is None
        # and model_fields_set contains the field
        if self.linked_at is None and "linked_at" in self.model_fields_set:
            _dict['linkedAt'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if avatar_url (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_url is None and "avatar_url" in self.model_fields_set:
            _dict['avatarUrl'] = None

        # set to None if info (nullable) is None
        # and model_fields_set contains the field
        if self.info is None and "info" in self.model_fields_set:
            _dict['info'] = None

        # set to None if raw (nullable) is None
        # and model_fields_set contains the field
        if self.raw is None and "raw" in self.model_fields_set:
            _dict['raw'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Client from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "integrationId": obj.get("integrationId"),
            "externalId": obj.get("externalId"),
            "lastSeen": obj.get("lastSeen"),
            "linkedAt": obj.get("linkedAt"),
            "displayName": obj.get("displayName"),
            "avatarUrl": obj.get("avatarUrl"),
            "info": obj.get("info"),
            "raw": obj.get("raw")
        })
        return _obj



# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from sunshine_conversations_client.model.carousel_message import CarouselMessage
from sunshine_conversations_client.model.file_message import FileMessage
from sunshine_conversations_client.model.form_message import FormMessage
from sunshine_conversations_client.model.form_response_message import FormResponseMessage
from sunshine_conversations_client.model.image_message import ImageMessage
from sunshine_conversations_client.model.list_message import ListMessage
from sunshine_conversations_client.model.location_message import LocationMessage
from sunshine_conversations_client.model.template_message import TemplateMessage
from sunshine_conversations_client.model.text_message import TextMessage
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

CONTENT_ONE_OF_SCHEMAS = ["CarouselMessage", "FileMessage", "FormMessage", "FormResponseMessage", "ImageMessage", "ListMessage", "LocationMessage", "TemplateMessage", "TextMessage"]

class Content(BaseModel):
    """
    Content
    """
    # data type: TextMessage
    oneof_schema_1_validator: Optional[TextMessage] = None
    # data type: CarouselMessage
    oneof_schema_2_validator: Optional[CarouselMessage] = None
    # data type: FileMessage
    oneof_schema_3_validator: Optional[FileMessage] = None
    # data type: FormMessage
    oneof_schema_4_validator: Optional[FormMessage] = None
    # data type: FormResponseMessage
    oneof_schema_5_validator: Optional[FormResponseMessage] = None
    # data type: ImageMessage
    oneof_schema_6_validator: Optional[ImageMessage] = None
    # data type: ListMessage
    oneof_schema_7_validator: Optional[ListMessage] = None
    # data type: LocationMessage
    oneof_schema_8_validator: Optional[LocationMessage] = None
    # data type: TemplateMessage
    oneof_schema_9_validator: Optional[TemplateMessage] = None
    actual_instance: Optional[Union[CarouselMessage, FileMessage, FormMessage, FormResponseMessage, ImageMessage, ListMessage, LocationMessage, TemplateMessage, TextMessage]] = None
    one_of_schemas: Set[str] = { "CarouselMessage", "FileMessage", "FormMessage", "FormResponseMessage", "ImageMessage", "ListMessage", "LocationMessage", "TemplateMessage", "TextMessage" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Content.model_construct()
        error_messages = []
        match = 0
        # validate data type: TextMessage
        if not isinstance(v, TextMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextMessage`")
        else:
            match += 1
        # validate data type: CarouselMessage
        if not isinstance(v, CarouselMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CarouselMessage`")
        else:
            match += 1
        # validate data type: FileMessage
        if not isinstance(v, FileMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileMessage`")
        else:
            match += 1
        # validate data type: FormMessage
        if not isinstance(v, FormMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FormMessage`")
        else:
            match += 1
        # validate data type: FormResponseMessage
        if not isinstance(v, FormResponseMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FormResponseMessage`")
        else:
            match += 1
        # validate data type: ImageMessage
        if not isinstance(v, ImageMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageMessage`")
        else:
            match += 1
        # validate data type: ListMessage
        if not isinstance(v, ListMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListMessage`")
        else:
            match += 1
        # validate data type: LocationMessage
        if not isinstance(v, LocationMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LocationMessage`")
        else:
            match += 1
        # validate data type: TemplateMessage
        if not isinstance(v, TemplateMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TemplateMessage`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Content with oneOf schemas: CarouselMessage, FileMessage, FormMessage, FormResponseMessage, ImageMessage, ListMessage, LocationMessage, TemplateMessage, TextMessage. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Content with oneOf schemas: CarouselMessage, FileMessage, FormMessage, FormResponseMessage, ImageMessage, ListMessage, LocationMessage, TemplateMessage, TextMessage. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `type` in the input.")

        # check if data type is `CarouselMessage`
        if _data_type == "carousel":
            instance.actual_instance = CarouselMessage.from_json(json_str)
            return instance

        # check if data type is `FileMessage`
        if _data_type == "file":
            instance.actual_instance = FileMessage.from_json(json_str)
            return instance

        # check if data type is `FormMessage`
        if _data_type == "form":
            instance.actual_instance = FormMessage.from_json(json_str)
            return instance

        # check if data type is `FormResponseMessage`
        if _data_type == "formResponse":
            instance.actual_instance = FormResponseMessage.from_json(json_str)
            return instance

        # check if data type is `ImageMessage`
        if _data_type == "image":
            instance.actual_instance = ImageMessage.from_json(json_str)
            return instance

        # check if data type is `ListMessage`
        if _data_type == "list":
            instance.actual_instance = ListMessage.from_json(json_str)
            return instance

        # check if data type is `LocationMessage`
        if _data_type == "location":
            instance.actual_instance = LocationMessage.from_json(json_str)
            return instance

        # check if data type is `TemplateMessage`
        if _data_type == "template":
            instance.actual_instance = TemplateMessage.from_json(json_str)
            return instance

        # check if data type is `TextMessage`
        if _data_type == "text":
            instance.actual_instance = TextMessage.from_json(json_str)
            return instance

        # check if data type is `CarouselMessage`
        if _data_type == "carouselMessage":
            instance.actual_instance = CarouselMessage.from_json(json_str)
            return instance

        # check if data type is `FileMessage`
        if _data_type == "fileMessage":
            instance.actual_instance = FileMessage.from_json(json_str)
            return instance

        # check if data type is `FormMessage`
        if _data_type == "formMessage":
            instance.actual_instance = FormMessage.from_json(json_str)
            return instance

        # check if data type is `FormResponseMessage`
        if _data_type == "formResponseMessage":
            instance.actual_instance = FormResponseMessage.from_json(json_str)
            return instance

        # check if data type is `ImageMessage`
        if _data_type == "imageMessage":
            instance.actual_instance = ImageMessage.from_json(json_str)
            return instance

        # check if data type is `ListMessage`
        if _data_type == "listMessage":
            instance.actual_instance = ListMessage.from_json(json_str)
            return instance

        # check if data type is `LocationMessage`
        if _data_type == "locationMessage":
            instance.actual_instance = LocationMessage.from_json(json_str)
            return instance

        # check if data type is `TemplateMessage`
        if _data_type == "templateMessage":
            instance.actual_instance = TemplateMessage.from_json(json_str)
            return instance

        # check if data type is `TextMessage`
        if _data_type == "textMessage":
            instance.actual_instance = TextMessage.from_json(json_str)
            return instance

        # deserialize data into TextMessage
        try:
            instance.actual_instance = TextMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CarouselMessage
        try:
            instance.actual_instance = CarouselMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FileMessage
        try:
            instance.actual_instance = FileMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FormMessage
        try:
            instance.actual_instance = FormMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FormResponseMessage
        try:
            instance.actual_instance = FormResponseMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ImageMessage
        try:
            instance.actual_instance = ImageMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListMessage
        try:
            instance.actual_instance = ListMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LocationMessage
        try:
            instance.actual_instance = LocationMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TemplateMessage
        try:
            instance.actual_instance = TemplateMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Content with oneOf schemas: CarouselMessage, FileMessage, FormMessage, FormResponseMessage, ImageMessage, ListMessage, LocationMessage, TemplateMessage, TextMessage. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Content with oneOf schemas: CarouselMessage, FileMessage, FormMessage, FormResponseMessage, ImageMessage, ListMessage, LocationMessage, TemplateMessage, TextMessage. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CarouselMessage, FileMessage, FormMessage, FormResponseMessage, ImageMessage, ListMessage, LocationMessage, TemplateMessage, TextMessage]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



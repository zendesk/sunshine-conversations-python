# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sunshine_conversations_client.model.client_association import ClientAssociation
from typing import Optional, Set
from typing_extensions import Self

class Participant(BaseModel):
    """
    Participant
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the participant.")
    user_id: Optional[StrictStr] = Field(default=None, description="The id of the associated user.", alias="userId")
    unread_count: Optional[StrictInt] = Field(default=None, description="Number of messages the user has not yet read.", alias="unreadCount")
    client_associations: Optional[List[ClientAssociation]] = Field(default=None, description="Represents the clients that are active in the conversation for a particular user. A participant can have multiple clientAssociations in the case of channel transfer, business initiated conversations, or identified users. The order of the array indicates how recently a client has interacted with the conversation, with the most recent client first. The first item in the array is considered to be the user's primary client for that conversation, and will be selected first for message delivery. ", alias="clientAssociations")
    user_external_id: Optional[StrictStr] = Field(default=None, description="The externalId of the associated user.", alias="userExternalId")
    last_read: Optional[StrictStr] = Field(default=None, description="A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing the latest message the user has read.", alias="lastRead")
    __properties: ClassVar[List[str]] = ["id", "userId", "unreadCount", "clientAssociations", "userExternalId", "lastRead"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Participant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in client_associations (list)
        _items = []
        if self.client_associations:
            for _item_client_associations in self.client_associations:
                if _item_client_associations:
                    _items.append(_item_client_associations.to_dict())
            _dict['clientAssociations'] = _items
        # set to None if user_external_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_external_id is None and "user_external_id" in self.model_fields_set:
            _dict['userExternalId'] = None

        # set to None if last_read (nullable) is None
        # and model_fields_set contains the field
        if self.last_read is None and "last_read" in self.model_fields_set:
            _dict['lastRead'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Participant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userId": obj.get("userId"),
            "unreadCount": obj.get("unreadCount"),
            "clientAssociations": [ClientAssociation.from_dict(_item) for _item in obj["clientAssociations"]] if obj.get("clientAssociations") is not None else None,
            "userExternalId": obj.get("userExternalId"),
            "lastRead": obj.get("lastRead")
        })
        return _obj



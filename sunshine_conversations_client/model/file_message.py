# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FileMessage(BaseModel):
    """
    FileMessage
    """ # noqa: E501
    type: StrictStr = Field(description="The type of message.")
    media_url: StrictStr = Field(description="The URL for media, such as an image, attached to the message. <aside class=\"notice\"><strong>Note:</strong> An authorization header is required to access the mediaUrl when private attachments are enabled. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> ", alias="mediaUrl")
    media_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The size of the media.", alias="mediaSize")
    media_type: Optional[StrictStr] = Field(default=None, description="The media type of the file.", alias="mediaType")
    alt_text: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="An optional description of the file for accessibility purposes. The field will be saved by default with the file name as the value.", alias="altText")
    text: Optional[StrictStr] = Field(default=None, description="The text content of the message.")
    block_chat_input: Optional[StrictBool] = Field(default=None, description="When set to true, the chat input will be disabled on supported client implementations when the message is the most recent one in the history. Can be used for guided flows or to temporarily disable the user's ability to send messages in the conversation.", alias="blockChatInput")
    html_text: Optional[Annotated[str, Field(strict=True, max_length=4096)]] = Field(default=None, description="HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://developer.zendesk.com/documentation/conversations/messaging-platform/programmable-conversations/structured-messages/#rich-text) documentation for more information.", alias="htmlText")
    markdown_text: Optional[Annotated[str, Field(strict=True, max_length=4096)]] = Field(default=None, description="Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://developer.zendesk.com/documentation/conversations/messaging-platform/programmable-conversations/structured-messages/#rich-text) documentation for more information.", alias="markdownText")
    attachment_id: Optional[StrictStr] = Field(default=None, description="An identifier used by Sunshine Conversations for internal purposes.", alias="attachmentId")
    __properties: ClassVar[List[str]] = ["type", "mediaUrl", "mediaSize", "mediaType", "altText", "text", "blockChatInput", "htmlText", "markdownText", "attachmentId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "media_size",
            "media_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type") if obj.get("type") is not None else 'file',
            "mediaUrl": obj.get("mediaUrl"),
            "mediaSize": obj.get("mediaSize"),
            "mediaType": obj.get("mediaType"),
            "altText": obj.get("altText"),
            "text": obj.get("text"),
            "blockChatInput": obj.get("blockChatInput"),
            "htmlText": obj.get("htmlText"),
            "markdownText": obj.get("markdownText"),
            "attachmentId": obj.get("attachmentId")
        })
        return _obj



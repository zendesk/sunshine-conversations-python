# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sunshine_conversations_client.model.form_options_inner import FormOptionsInner
from typing import Optional, Set
from typing_extensions import Self

class FormMessageField(BaseModel):
    """
    FormMessageField
    """ # noqa: E501
    type: StrictStr = Field(description="The field type.")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(description="The name of the field. Must be unique per form or formResponse.")
    label: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(description="The label of the field. What the field is displayed as on Web Messenger.")
    text: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = Field(default=None, description="Specifies the response for a text field.")
    email: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=128)]] = Field(default=None, description="Specifies the response for a email field.")
    select: Optional[List[Dict[str, Any]]] = Field(default=None, description="Array of objects representing the response for a field of type select. Form and formResponse messages only.")
    placeholder: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=128)]] = Field(default=None, description="Placeholder text for the field. Form message only.")
    min_size: Optional[Annotated[int, Field(le=256, strict=True, ge=1)]] = Field(default=1, description="The minimum allowed length for the response for a field of type text. Form message only.", alias="minSize")
    max_size: Optional[Annotated[int, Field(le=256, strict=True, ge=1)]] = Field(default=128, description="The maximum allowed length for the response for a field of type text. Form message only.", alias="maxSize")
    options: Optional[Annotated[List[FormOptionsInner], Field(max_length=200)]] = Field(default=None, description="Array of objects representing options for a field of type select.")
    __properties: ClassVar[List[str]] = ["type", "name", "label", "text", "email", "select", "placeholder", "minSize", "maxSize", "options"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['email', 'select', 'text']):
            raise ValueError("must be one of enum values ('email', 'select', 'text')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormMessageField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item_options in self.options:
                if _item_options:
                    _items.append(_item_options.to_dict())
            _dict['options'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormMessageField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "text": obj.get("text"),
            "email": obj.get("email"),
            "select": obj.get("select"),
            "placeholder": obj.get("placeholder"),
            "minSize": obj.get("minSize") if obj.get("minSize") is not None else 1,
            "maxSize": obj.get("maxSize") if obj.get("maxSize") is not None else 128,
            "options": [FormOptionsInner.from_dict(_item) for _item in obj["options"]] if obj.get("options") is not None else None
        })
        return _obj



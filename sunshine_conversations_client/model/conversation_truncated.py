# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sunshine_conversations_client.model.conversation_type import ConversationType
from sunshine_conversations_client.model.switchboard_integration_webhook import SwitchboardIntegrationWebhook
from typing import Optional, Set
from typing_extensions import Self

class ConversationTruncated(BaseModel):
    """
    ConversationTruncated
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the conversation.")
    type: Optional[ConversationType] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. ")
    active_switchboard_integration: Optional[SwitchboardIntegrationWebhook] = Field(default=None, description="The current switchboard integration that is in control of the conversation. This field is omitted if no `activeSwitchboardIntegration` exists for the conversation.", alias="activeSwitchboardIntegration")
    pending_switchboard_integration: Optional[SwitchboardIntegrationWebhook] = Field(default=None, description="The switchboard integration that is awaiting control. This field is omitted if no switchboard integration has been previously offered control.", alias="pendingSwitchboardIntegration")
    __properties: ClassVar[List[str]] = ["id", "type", "metadata", "activeSwitchboardIntegration", "pendingSwitchboardIntegration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversationTruncated from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active_switchboard_integration
        if self.active_switchboard_integration:
            _dict['activeSwitchboardIntegration'] = self.active_switchboard_integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pending_switchboard_integration
        if self.pending_switchboard_integration:
            _dict['pendingSwitchboardIntegration'] = self.pending_switchboard_integration.to_dict()
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if active_switchboard_integration (nullable) is None
        # and model_fields_set contains the field
        if self.active_switchboard_integration is None and "active_switchboard_integration" in self.model_fields_set:
            _dict['activeSwitchboardIntegration'] = None

        # set to None if pending_switchboard_integration (nullable) is None
        # and model_fields_set contains the field
        if self.pending_switchboard_integration is None and "pending_switchboard_integration" in self.model_fields_set:
            _dict['pendingSwitchboardIntegration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversationTruncated from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "metadata": obj.get("metadata"),
            "activeSwitchboardIntegration": SwitchboardIntegrationWebhook.from_dict(obj["activeSwitchboardIntegration"]) if obj.get("activeSwitchboardIntegration") is not None else None,
            "pendingSwitchboardIntegration": SwitchboardIntegrationWebhook.from_dict(obj["pendingSwitchboardIntegration"]) if obj.get("pendingSwitchboardIntegration") is not None else None
        })
        return _obj



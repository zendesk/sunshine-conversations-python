# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sunshine_conversations_client.model.client import Client
from sunshine_conversations_client.model.conversation_truncated import ConversationTruncated
from sunshine_conversations_client.model.source_webhook import SourceWebhook
from sunshine_conversations_client.model.user_truncated import UserTruncated
from typing import Optional, Set
from typing_extensions import Self

class ClientRemoveEventAllOfPayload(BaseModel):
    """
    The payload of the event. The contents of this object depend on the type of event.
    """ # noqa: E501
    conversation: Optional[ConversationTruncated] = Field(default=None, description="The conversation associated with the removal of the client. This field is only present when the reason is `theft`, `linkCancelled` or `linkFailed`. Note that for the `theft` reason, the conversation will not be present if it has been deleted. ")
    user: Optional[UserTruncated] = Field(default=None, description="The user associated with the client.")
    client: Optional[Client] = Field(default=None, description="The removed client.")
    reason: Optional[StrictStr] = Field(default=None, description="The reason for which the client was removed. * `api` - The client was removed using the API. * `linkCancelled` - The user cancelled a channel link. * `linkFailed` - The client was removed after a channel link attempt failed. * `sdk` - The client was removed using the SDK. * `theft` - The client was transferred to another user due to a channel link. ")
    error: Optional[Dict[str, Any]] = Field(default=None, description="Object containing details of what went wrong. This field will only be present when the reason is `linkCancelled` or `linkFailed`.")
    source: Optional[SourceWebhook] = Field(default=None, description="The source where this event originated from. This could be the API or an SDK device.")
    __properties: ClassVar[List[str]] = ["conversation", "user", "client", "reason", "error", "source"]

    @field_validator('reason')
    def reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['api', 'linkCancelled', 'linkFailed', 'sdk', 'theft']):
            raise ValueError("must be one of enum values ('api', 'linkCancelled', 'linkFailed', 'sdk', 'theft')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientRemoveEventAllOfPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversation
        if self.conversation:
            _dict['conversation'] = self.conversation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # set to None if conversation (nullable) is None
        # and model_fields_set contains the field
        if self.conversation is None and "conversation" in self.model_fields_set:
            _dict['conversation'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientRemoveEventAllOfPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversation": ConversationTruncated.from_dict(obj["conversation"]) if obj.get("conversation") is not None else None,
            "user": UserTruncated.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "client": Client.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "reason": obj.get("reason"),
            "error": obj.get("error"),
            "source": SourceWebhook.from_dict(obj["source"]) if obj.get("source") is not None else None
        })
        return _obj



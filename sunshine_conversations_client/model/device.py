# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Device(BaseModel):
    """
    Device
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the device.")
    type: Optional[StrictStr] = Field(default=None, description="The type of integration that the device represents.")
    guid: Optional[StrictStr] = Field(default=None, description="A unique identifier for the device, generated client-side by the SDK.")
    client_id: Optional[StrictStr] = Field(default=None, description="The id of the client to which this device is associated.", alias="clientId")
    status: Optional[StrictStr] = Field(default=None, description="The device status. Indicates if the device will receive push notifications or not.")
    integration_id: Optional[StrictStr] = Field(default=None, description="The ID of the integration that the device was created for.", alias="integrationId")
    last_seen: Optional[StrictStr] = Field(default=None, description="A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing the last time the user interacted with this device.", alias="lastSeen")
    push_notification_token: Optional[StrictStr] = Field(default=None, description="The token used for push notifications on Android and iOS devices.", alias="pushNotificationToken")
    info: Optional[Dict[str, Any]] = Field(default=None, description="A flat curated object with properties that vary for each SDK platform. All keys are optional and not guaranteed to be available.")
    app_version: Optional[StrictStr] = Field(default=None, description="Version of the mobile app in which the SDK is embedded. Not applicable for devices of type web.", alias="appVersion")
    __properties: ClassVar[List[str]] = ["id", "type", "guid", "clientId", "status", "integrationId", "lastSeen", "pushNotificationToken", "info", "appVersion"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['android', 'ios', 'web']):
            raise ValueError("must be one of enum values ('android', 'ios', 'web')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'inactive']):
            raise ValueError("must be one of enum values ('active', 'inactive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if push_notification_token (nullable) is None
        # and model_fields_set contains the field
        if self.push_notification_token is None and "push_notification_token" in self.model_fields_set:
            _dict['pushNotificationToken'] = None

        # set to None if info (nullable) is None
        # and model_fields_set contains the field
        if self.info is None and "info" in self.model_fields_set:
            _dict['info'] = None

        # set to None if app_version (nullable) is None
        # and model_fields_set contains the field
        if self.app_version is None and "app_version" in self.model_fields_set:
            _dict['appVersion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "guid": obj.get("guid"),
            "clientId": obj.get("clientId"),
            "status": obj.get("status"),
            "integrationId": obj.get("integrationId"),
            "lastSeen": obj.get("lastSeen"),
            "pushNotificationToken": obj.get("pushNotificationToken"),
            "info": obj.get("info"),
            "appVersion": obj.get("appVersion")
        })
        return _obj



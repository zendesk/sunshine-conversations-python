# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AppSettings(BaseModel):
    """
    Customizable app settings.
    """ # noqa: E501
    conversation_retention_seconds: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Number of seconds of inactivity before a conversationâ€™s messages  will be automatically deleted. See  [Conversation Retention Seconds](https://docs.smooch.io/guide/creating-and-managing-apps/#conversation-retention-seconds) for more information. ", alias="conversationRetentionSeconds")
    mask_credit_card_numbers: Optional[StrictBool] = Field(default=None, description="A boolean specifying whether credit card numbers should be masked  when sent through Sunshine Conversations. ", alias="maskCreditCardNumbers")
    use_animal_names: Optional[StrictBool] = Field(default=None, description="A boolean specifying whether animal names should be used for  unnamed users. See the  [user naming guide](https://developer.zendesk.com/documentation/conversations/messaging-platform/programmable-conversations/receiving-messages/#message-author-name) for details. ", alias="useAnimalNames")
    echo_postback: Optional[StrictBool] = Field(default=None, description="A boolean specifying whether a message should be added to the conversation  history when a postback button is clicked. See  [Echo Postbacks](https://docs.smooch.io/guide/creating-and-managing-apps/#echo-postbacks) for more information. ", alias="echoPostback")
    ignore_auto_conversation_start: Optional[StrictBool] = Field(default=None, description="A boolean specifying whether a non message event coming from a channel will  trigger a  [start conversation](https://developer.zendesk.com/api-reference/conversations/#section/Webhook-Triggers) event and count as a monthly active user (MAU). <aside class=\"notice\"><strong>Note:</strong> Calling <code>startConversation()</code> (or equivalent) from the Android,  iOS or Web SDK will count as a MAU, regardless of the value of this setting.</aside> ", alias="ignoreAutoConversationStart")
    multi_convo_enabled: Optional[StrictBool] = Field(default=None, description="A boolean specifying whether users are allowed to be part of several conversations. Enabling `multiConvo` is **irreversible**. ", alias="multiConvoEnabled")
    app_localization_enabled: Optional[StrictBool] = Field(default=None, description="A boolean specifying whether the messages authored by the Sunshine Conversations platform should be localized. ", alias="appLocalizationEnabled")
    __properties: ClassVar[List[str]] = ["conversationRetentionSeconds", "maskCreditCardNumbers", "useAnimalNames", "echoPostback", "ignoreAutoConversationStart", "multiConvoEnabled", "appLocalizationEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversationRetentionSeconds": obj.get("conversationRetentionSeconds"),
            "maskCreditCardNumbers": obj.get("maskCreditCardNumbers"),
            "useAnimalNames": obj.get("useAnimalNames"),
            "echoPostback": obj.get("echoPostback"),
            "ignoreAutoConversationStart": obj.get("ignoreAutoConversationStart"),
            "multiConvoEnabled": obj.get("multiConvoEnabled"),
            "appLocalizationEnabled": obj.get("appLocalizationEnabled")
        })
        return _obj



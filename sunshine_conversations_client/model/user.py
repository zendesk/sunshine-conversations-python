# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sunshine_conversations_client.model.identity import Identity
from sunshine_conversations_client.model.profile import Profile
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the user.")
    authenticated: Optional[StrictBool] = Field(default=None, description="Whether or not the user has authenticated, either via JWT or via the Help Center")
    external_id: Optional[StrictStr] = Field(default=None, description="An optional ID that can also be used to retrieve the user. ", alias="externalId")
    zendesk_id: Optional[StrictStr] = Field(default=None, description="The ID that links a messaging user to its core Zendesk user counterpart. This ID can be used to fetch the core user record via the Zendesk Support API. ", alias="zendeskId")
    signed_up_at: Optional[StrictStr] = Field(default=None, description="The date at which the user signed up. Must be ISO 8601 time format `YYYY-MM-DDThh:mm:ss.sssZ`.", alias="signedUpAt")
    to_be_retained: Optional[StrictBool] = Field(default=None, description="Flag indicating whether a user should be retained after they have passed their inactive expiry. See [creating deletion schedules for bot-only conversations](https://support.zendesk.com/hc/en-us/articles/8499219792154) for more information.", alias="toBeRetained")
    profile: Optional[Profile] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. ")
    identities: Optional[List[Identity]] = Field(default=None, description="The user's connected identities.")
    __properties: ClassVar[List[str]] = ["id", "authenticated", "externalId", "zendeskId", "signedUpAt", "toBeRetained", "profile", "metadata", "identities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "authenticated",
            "identities",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in identities (list)
        _items = []
        if self.identities:
            for _item_identities in self.identities:
                if _item_identities:
                    _items.append(_item_identities.to_dict())
            _dict['identities'] = _items
        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if zendesk_id (nullable) is None
        # and model_fields_set contains the field
        if self.zendesk_id is None and "zendesk_id" in self.model_fields_set:
            _dict['zendeskId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "authenticated": obj.get("authenticated"),
            "externalId": obj.get("externalId"),
            "zendeskId": obj.get("zendeskId"),
            "signedUpAt": obj.get("signedUpAt"),
            "toBeRetained": obj.get("toBeRetained"),
            "profile": Profile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "metadata": obj.get("metadata"),
            "identities": [Identity.from_dict(_item) for _item in obj["identities"]] if obj.get("identities") is not None else None
        })
        return _obj



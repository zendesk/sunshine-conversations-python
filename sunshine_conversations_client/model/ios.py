# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sunshine_conversations_client.model.default_responder_default_responder import DefaultResponderDefaultResponder
from sunshine_conversations_client.model.integration import Integration
from sunshine_conversations_client.model.status import Status
from typing import Optional, Set
from typing_extensions import Self

class Ios(Integration):
    """
    Ios
    """ # noqa: E501
    default_responder_id: Optional[StrictStr] = Field(default=None, description="The default responder ID for the integration. This is the ID of the responder that will be used to send messages to the user. For more information, refer to the <a href=\"https://developer.zendesk.com/documentation/conversations/messaging-platform/programmable-conversations/switchboard/#default-integration-assignment\">Switchboard guide</a>. ", alias="defaultResponderId")
    default_responder: Optional[DefaultResponderDefaultResponder] = Field(default=None, alias="defaultResponder")
    type: Optional[StrictStr] = Field(default='ios', description="To configure an ios integration, call the create integration endpoint with a base64 encoded Apple Push Notification certificate from the [Apple Developer Portal](https://developer.apple.com/). ")
    certificate: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The binary of your APN certificate base64 encoded. To base64 encode your certificate you can use this command in the terminal: `openssl base64 -in YOUR_CERTIFICATE.p12 | tr -d '\\n'` ")
    password: Optional[StrictStr] = Field(default=None, description="The password for your APN certificate.")
    production: Optional[StrictBool] = Field(default=None, description="The APN environment to connect to (Production, if true, or Sandbox). Defaults to value inferred from certificate if not specified.")
    auto_update_badge: Optional[StrictBool] = Field(default=None, description="Use the unread count of the conversation as the application badge.", alias="autoUpdateBadge")
    can_user_see_conversation_list: Optional[StrictBool] = Field(default=None, description="Allows users to view their list of conversations. By default, the list of conversations will be visible. *This setting only applies to apps where `settings.multiConvoEnabled` is set to `true`*. ", alias="canUserSeeConversationList")
    can_user_create_more_conversations: Optional[StrictBool] = Field(default=None, description="Allows users to create more than one conversation on the iOS integration.", alias="canUserCreateMoreConversations")
    attachments_enabled: Optional[StrictBool] = Field(default=None, description="Allows users to send attachments. By default, the setting is set to true. This setting can only be configured in Zendesk Admin Center. ", alias="attachmentsEnabled")
    __properties: ClassVar[List[str]] = ["id", "type", "status", "displayName", "defaultResponderId", "defaultResponder", "certificate", "password", "production", "autoUpdateBadge", "canUserSeeConversationList", "canUserCreateMoreConversations", "attachmentsEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Ios from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "attachments_enabled",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_responder
        if self.default_responder:
            _dict['defaultResponder'] = self.default_responder.to_dict()
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if default_responder_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_responder_id is None and "default_responder_id" in self.model_fields_set:
            _dict['defaultResponderId'] = None

        # set to None if default_responder (nullable) is None
        # and model_fields_set contains the field
        if self.default_responder is None and "default_responder" in self.model_fields_set:
            _dict['defaultResponder'] = None

        # set to None if certificate (nullable) is None
        # and model_fields_set contains the field
        if self.certificate is None and "certificate" in self.model_fields_set:
            _dict['certificate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Ios from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'ios',
            "status": obj.get("status"),
            "displayName": obj.get("displayName"),
            "defaultResponderId": obj.get("defaultResponderId"),
            "defaultResponder": DefaultResponderDefaultResponder.from_dict(obj["defaultResponder"]) if obj.get("defaultResponder") is not None else None,
            "certificate": obj.get("certificate"),
            "password": obj.get("password"),
            "production": obj.get("production"),
            "autoUpdateBadge": obj.get("autoUpdateBadge"),
            "canUserSeeConversationList": obj.get("canUserSeeConversationList"),
            "canUserCreateMoreConversations": obj.get("canUserCreateMoreConversations"),
            "attachmentsEnabled": obj.get("attachmentsEnabled")
        })
        return _obj



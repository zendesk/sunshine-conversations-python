# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sunshine_conversations_client.model.prechat_capture import PrechatCapture
from typing import Optional, Set
from typing_extensions import Self

class WebUpdate(BaseModel):
    """
    WebUpdate
    """ # noqa: E501
    display_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=100)]] = Field(default=None, description="A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.", alias="displayName")
    default_responder_id: Optional[StrictStr] = Field(default=None, description="The default responder ID for the integration. This is the ID of the responder that will be used to send messages to the user. For more information, refer to the <a href=\"https://developer.zendesk.com/documentation/conversations/messaging-platform/programmable-conversations/switchboard/#default-integration-assignment\">Switchboard guide</a>. ", alias="defaultResponderId")
    brand_color: Optional[StrictStr] = Field(default='65758e', description="This color will be used in the messenger header and the button or tab in idle state. Must be a 3 or 6-character hexadecimal color.", alias="brandColor")
    fixed_intro_pane: Optional[StrictBool] = Field(default=False, description="When true, the introduction pane will be pinned at the top of the conversation instead of scrolling with it.", alias="fixedIntroPane")
    conversation_color: Optional[StrictStr] = Field(default='0099ff', description="This color will be used for customer messages, quick replies and actions in the footer. Must be a 3 or 6-character hexadecimal color.", alias="conversationColor")
    action_color: Optional[StrictStr] = Field(default='0099ff', description="This color will be used for call-to-actions inside your messages. Must be a 3 or 6-character hexadecimal color.", alias="actionColor")
    display_style: Optional[StrictStr] = Field(default='button', description="Choose how the messenger will appear on your website. Must be either button or tab.", alias="displayStyle")
    button_icon_url: Optional[StrictStr] = Field(default=None, description="With the button style Web Messenger, you have the option of selecting your own button icon. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.", alias="buttonIconUrl")
    button_width: Optional[StrictStr] = Field(default='58', description="With the button style Web Messenger, you have the option of specifying the button width.", alias="buttonWidth")
    button_height: Optional[StrictStr] = Field(default='58', description="With the button style Web Messenger, you have the option of specifying the button height.", alias="buttonHeight")
    integration_order: Optional[List[StrictStr]] = Field(default=None, description="Array of integration IDs, order will be reflected in the Web Messenger. When set, only integrations from this list will be displayed in the Web Messenger. If unset, all integrations will be displayed.", alias="integrationOrder")
    business_name: Optional[StrictStr] = Field(default=None, description="A custom business name for the Web Messenger.", alias="businessName")
    business_icon_url: Optional[StrictStr] = Field(default=None, description="A custom business icon url for the Web Messenger. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.", alias="businessIconUrl")
    background_image_url: Optional[StrictStr] = Field(default=None, description="A background image url for the conversation. Image will be tiled to fit the window.", alias="backgroundImageUrl")
    origin_whitelist: Optional[List[StrictStr]] = Field(default=None, description="A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted. The elements in the list should follow the serialized-origin format from RFC 6454: scheme \"://\" host [ \":\" port ], where scheme is http or https. ", alias="originWhitelist")
    prechat_capture: Optional[PrechatCapture] = Field(default=None, description="Object whose properties can be set to specify the add-onâ€™s options. See the [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture) to learn more about Prechat Capture.", alias="prechatCapture")
    can_user_see_conversation_list: Optional[StrictBool] = Field(default=None, description="Allows users to view their list of conversations. By default, the list of conversations will be visible. *This setting only applies to apps where `settings.multiConvoEnabled` is set to `true`*. ", alias="canUserSeeConversationList")
    can_user_create_more_conversations: Optional[StrictBool] = Field(default=None, description="Allows users to create more than one conversation on the web messenger integration.", alias="canUserCreateMoreConversations")
    __properties: ClassVar[List[str]] = ["displayName", "defaultResponderId", "brandColor", "fixedIntroPane", "conversationColor", "actionColor", "displayStyle", "buttonIconUrl", "buttonWidth", "buttonHeight", "integrationOrder", "businessName", "businessIconUrl", "backgroundImageUrl", "originWhitelist", "prechatCapture", "canUserSeeConversationList", "canUserCreateMoreConversations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prechat_capture
        if self.prechat_capture:
            _dict['prechatCapture'] = self.prechat_capture.to_dict()
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if default_responder_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_responder_id is None and "default_responder_id" in self.model_fields_set:
            _dict['defaultResponderId'] = None

        # set to None if button_icon_url (nullable) is None
        # and model_fields_set contains the field
        if self.button_icon_url is None and "button_icon_url" in self.model_fields_set:
            _dict['buttonIconUrl'] = None

        # set to None if integration_order (nullable) is None
        # and model_fields_set contains the field
        if self.integration_order is None and "integration_order" in self.model_fields_set:
            _dict['integrationOrder'] = None

        # set to None if origin_whitelist (nullable) is None
        # and model_fields_set contains the field
        if self.origin_whitelist is None and "origin_whitelist" in self.model_fields_set:
            _dict['originWhitelist'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "defaultResponderId": obj.get("defaultResponderId"),
            "brandColor": obj.get("brandColor") if obj.get("brandColor") is not None else '65758e',
            "fixedIntroPane": obj.get("fixedIntroPane") if obj.get("fixedIntroPane") is not None else False,
            "conversationColor": obj.get("conversationColor") if obj.get("conversationColor") is not None else '0099ff',
            "actionColor": obj.get("actionColor") if obj.get("actionColor") is not None else '0099ff',
            "displayStyle": obj.get("displayStyle") if obj.get("displayStyle") is not None else 'button',
            "buttonIconUrl": obj.get("buttonIconUrl"),
            "buttonWidth": obj.get("buttonWidth") if obj.get("buttonWidth") is not None else '58',
            "buttonHeight": obj.get("buttonHeight") if obj.get("buttonHeight") is not None else '58',
            "integrationOrder": obj.get("integrationOrder"),
            "businessName": obj.get("businessName"),
            "businessIconUrl": obj.get("businessIconUrl"),
            "backgroundImageUrl": obj.get("backgroundImageUrl"),
            "originWhitelist": obj.get("originWhitelist"),
            "prechatCapture": PrechatCapture.from_dict(obj["prechatCapture"]) if obj.get("prechatCapture") is not None else None,
            "canUserSeeConversationList": obj.get("canUserSeeConversationList"),
            "canUserCreateMoreConversations": obj.get("canUserCreateMoreConversations")
        })
        return _obj



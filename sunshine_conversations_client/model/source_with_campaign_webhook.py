# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sunshine_conversations_client.model.campaign import Campaign
from sunshine_conversations_client.model.client import Client
from sunshine_conversations_client.model.device import Device
from typing import Optional, Set
from typing_extensions import Self

class SourceWithCampaignWebhook(BaseModel):
    """
    SourceWithCampaignWebhook
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="An identifier for the channel from which a message originated. May include one of api, sdk, messenger, or any number of other channels.")
    integration_id: Optional[StrictStr] = Field(default=None, description="Identifier indicating which integration the message was sent from. For user messages only.", alias="integrationId")
    original_message_id: Optional[StrictStr] = Field(default=None, description="Message identifier assigned by the originating channel.", alias="originalMessageId")
    original_message_timestamp: Optional[StrictStr] = Field(default=None, description="A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing when the third-party channel received the message.", alias="originalMessageTimestamp")
    client: Optional[Client] = Field(default=None, description="The client from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook.")
    device: Optional[Device] = Field(default=None, description="The device from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook")
    campaign: Optional[Campaign] = None
    __properties: ClassVar[List[str]] = ["type", "integrationId", "originalMessageId", "originalMessageTimestamp", "client", "device", "campaign"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceWithCampaignWebhook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign
        if self.campaign:
            _dict['campaign'] = self.campaign.to_dict()
        # set to None if original_message_id (nullable) is None
        # and model_fields_set contains the field
        if self.original_message_id is None and "original_message_id" in self.model_fields_set:
            _dict['originalMessageId'] = None

        # set to None if original_message_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.original_message_timestamp is None and "original_message_timestamp" in self.model_fields_set:
            _dict['originalMessageTimestamp'] = None

        # set to None if client (nullable) is None
        # and model_fields_set contains the field
        if self.client is None and "client" in self.model_fields_set:
            _dict['client'] = None

        # set to None if device (nullable) is None
        # and model_fields_set contains the field
        if self.device is None and "device" in self.model_fields_set:
            _dict['device'] = None

        # set to None if campaign (nullable) is None
        # and model_fields_set contains the field
        if self.campaign is None and "campaign" in self.model_fields_set:
            _dict['campaign'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceWithCampaignWebhook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "integrationId": obj.get("integrationId"),
            "originalMessageId": obj.get("originalMessageId"),
            "originalMessageTimestamp": obj.get("originalMessageTimestamp"),
            "client": Client.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "device": Device.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "campaign": Campaign.from_dict(obj["campaign"]) if obj.get("campaign") is not None else None
        })
        return _obj



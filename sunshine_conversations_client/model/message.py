# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sunshine_conversations_client.model.activity_message import ActivityMessage
from sunshine_conversations_client.model.author import Author
from sunshine_conversations_client.model.content import Content
from sunshine_conversations_client.model.source import Source
from typing import Optional, Set
from typing_extensions import Self

class Message(BaseModel):
    """
    Message
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the message.")
    received: Optional[StrictStr] = Field(default=None, description="A datetime string with the format `YYYY-MM-DDThh:mm:ss.SSSZ` representing when Sunshine Conversations received the message.")
    author: Optional[Author] = None
    activity: Optional[ActivityMessage] = Field(default=None, description="Details of the system activity that generated this message. This field is used when actions taken by the system generate a persisted message to notify the user or agent of an event that occurred. For example, when a user's Ticket gets closed. This property applies only to informational text messages generated via system events.")
    content: Optional[Content] = Field(default=None, description="The content of the message.")
    source: Optional[Source] = None
    quoted_message: Optional[QuotedMessage] = Field(default=None, description="The quoted message is currently only available for WhatsApp and Web Messenger `formResponse` messages.", alias="quotedMessage")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. ")
    deleted: Optional[StrictBool] = Field(default=None, description="true if the message serves as a placeholder for one that has been deleted.")
    __properties: ClassVar[List[str]] = ["id", "received", "author", "activity", "content", "source", "quotedMessage", "metadata", "deleted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity
        if self.activity:
            _dict['activity'] = self.activity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quoted_message
        if self.quoted_message:
            _dict['quotedMessage'] = self.quoted_message.to_dict()
        # set to None if quoted_message (nullable) is None
        # and model_fields_set contains the field
        if self.quoted_message is None and "quoted_message" in self.model_fields_set:
            _dict['quotedMessage'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if deleted (nullable) is None
        # and model_fields_set contains the field
        if self.deleted is None and "deleted" in self.model_fields_set:
            _dict['deleted'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "received": obj.get("received"),
            "author": Author.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "activity": ActivityMessage.from_dict(obj["activity"]) if obj.get("activity") is not None else None,
            "content": Content.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "source": Source.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "quotedMessage": QuotedMessage.from_dict(obj["quotedMessage"]) if obj.get("quotedMessage") is not None else None,
            "metadata": obj.get("metadata"),
            "deleted": obj.get("deleted")
        })
        return _obj

from sunshine_conversations_client.model.quoted_message import QuotedMessage
# TODO: Rewrite to not use raise_errors
Message.model_rebuild(raise_errors=False)


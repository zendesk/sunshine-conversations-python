# coding: utf-8

"""
    Sunshine Conversations API

    The version of the OpenAPI document: 17.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from sunshine_conversations_client.model.android_update import AndroidUpdate
from sunshine_conversations_client.model.apple_update import AppleUpdate
from sunshine_conversations_client.model.custom_update import CustomUpdate
from sunshine_conversations_client.model.instagram_update import InstagramUpdate
from sunshine_conversations_client.model.ios_update import IosUpdate
from sunshine_conversations_client.model.line_update import LineUpdate
from sunshine_conversations_client.model.mailgun_update import MailgunUpdate
from sunshine_conversations_client.model.message_bird_update import MessageBirdUpdate
from sunshine_conversations_client.model.messenger_update import MessengerUpdate
from sunshine_conversations_client.model.telegram_update import TelegramUpdate
from sunshine_conversations_client.model.twilio_update import TwilioUpdate
from sunshine_conversations_client.model.twitter_update import TwitterUpdate
from sunshine_conversations_client.model.unity_update import UnityUpdate
from sunshine_conversations_client.model.viber_update import ViberUpdate
from sunshine_conversations_client.model.web_update import WebUpdate
from sunshine_conversations_client.model.whats_app_update import WhatsAppUpdate
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

INTEGRATIONUPDATE_ONE_OF_SCHEMAS = ["AndroidUpdate", "AppleUpdate", "CustomUpdate", "InstagramUpdate", "IosUpdate", "LineUpdate", "MailgunUpdate", "MessageBirdUpdate", "MessengerUpdate", "TelegramUpdate", "TwilioUpdate", "TwitterUpdate", "UnityUpdate", "ViberUpdate", "WebUpdate", "WhatsAppUpdate"]

class IntegrationUpdate(BaseModel):
    """
    IntegrationUpdate
    """
    # data type: AndroidUpdate
    oneof_schema_1_validator: Optional[AndroidUpdate] = None
    # data type: AppleUpdate
    oneof_schema_2_validator: Optional[AppleUpdate] = None
    # data type: CustomUpdate
    oneof_schema_3_validator: Optional[CustomUpdate] = None
    # data type: InstagramUpdate
    oneof_schema_4_validator: Optional[InstagramUpdate] = None
    # data type: IosUpdate
    oneof_schema_5_validator: Optional[IosUpdate] = None
    # data type: LineUpdate
    oneof_schema_6_validator: Optional[LineUpdate] = None
    # data type: MailgunUpdate
    oneof_schema_7_validator: Optional[MailgunUpdate] = None
    # data type: MessageBirdUpdate
    oneof_schema_8_validator: Optional[MessageBirdUpdate] = None
    # data type: MessengerUpdate
    oneof_schema_9_validator: Optional[MessengerUpdate] = None
    # data type: TelegramUpdate
    oneof_schema_10_validator: Optional[TelegramUpdate] = None
    # data type: TwilioUpdate
    oneof_schema_11_validator: Optional[TwilioUpdate] = None
    # data type: TwitterUpdate
    oneof_schema_12_validator: Optional[TwitterUpdate] = None
    # data type: UnityUpdate
    oneof_schema_13_validator: Optional[UnityUpdate] = None
    # data type: ViberUpdate
    oneof_schema_14_validator: Optional[ViberUpdate] = None
    # data type: WebUpdate
    oneof_schema_15_validator: Optional[WebUpdate] = None
    # data type: WhatsAppUpdate
    oneof_schema_16_validator: Optional[WhatsAppUpdate] = None
    actual_instance: Optional[Union[AndroidUpdate, AppleUpdate, CustomUpdate, InstagramUpdate, IosUpdate, LineUpdate, MailgunUpdate, MessageBirdUpdate, MessengerUpdate, TelegramUpdate, TwilioUpdate, TwitterUpdate, UnityUpdate, ViberUpdate, WebUpdate, WhatsAppUpdate]] = None
    one_of_schemas: Set[str] = { "AndroidUpdate", "AppleUpdate", "CustomUpdate", "InstagramUpdate", "IosUpdate", "LineUpdate", "MailgunUpdate", "MessageBirdUpdate", "MessengerUpdate", "TelegramUpdate", "TwilioUpdate", "TwitterUpdate", "UnityUpdate", "ViberUpdate", "WebUpdate", "WhatsAppUpdate" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = IntegrationUpdate.model_construct()
        error_messages = []
        match = 0
        # validate data type: AndroidUpdate
        if not isinstance(v, AndroidUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AndroidUpdate`")
        else:
            match += 1
        # validate data type: AppleUpdate
        if not isinstance(v, AppleUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AppleUpdate`")
        else:
            match += 1
        # validate data type: CustomUpdate
        if not isinstance(v, CustomUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CustomUpdate`")
        else:
            match += 1
        # validate data type: InstagramUpdate
        if not isinstance(v, InstagramUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InstagramUpdate`")
        else:
            match += 1
        # validate data type: IosUpdate
        if not isinstance(v, IosUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IosUpdate`")
        else:
            match += 1
        # validate data type: LineUpdate
        if not isinstance(v, LineUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LineUpdate`")
        else:
            match += 1
        # validate data type: MailgunUpdate
        if not isinstance(v, MailgunUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MailgunUpdate`")
        else:
            match += 1
        # validate data type: MessageBirdUpdate
        if not isinstance(v, MessageBirdUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MessageBirdUpdate`")
        else:
            match += 1
        # validate data type: MessengerUpdate
        if not isinstance(v, MessengerUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MessengerUpdate`")
        else:
            match += 1
        # validate data type: TelegramUpdate
        if not isinstance(v, TelegramUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TelegramUpdate`")
        else:
            match += 1
        # validate data type: TwilioUpdate
        if not isinstance(v, TwilioUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TwilioUpdate`")
        else:
            match += 1
        # validate data type: TwitterUpdate
        if not isinstance(v, TwitterUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TwitterUpdate`")
        else:
            match += 1
        # validate data type: UnityUpdate
        if not isinstance(v, UnityUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UnityUpdate`")
        else:
            match += 1
        # validate data type: ViberUpdate
        if not isinstance(v, ViberUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ViberUpdate`")
        else:
            match += 1
        # validate data type: WebUpdate
        if not isinstance(v, WebUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebUpdate`")
        else:
            match += 1
        # validate data type: WhatsAppUpdate
        if not isinstance(v, WhatsAppUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WhatsAppUpdate`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in IntegrationUpdate with oneOf schemas: AndroidUpdate, AppleUpdate, CustomUpdate, InstagramUpdate, IosUpdate, LineUpdate, MailgunUpdate, MessageBirdUpdate, MessengerUpdate, TelegramUpdate, TwilioUpdate, TwitterUpdate, UnityUpdate, ViberUpdate, WebUpdate, WhatsAppUpdate. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in IntegrationUpdate with oneOf schemas: AndroidUpdate, AppleUpdate, CustomUpdate, InstagramUpdate, IosUpdate, LineUpdate, MailgunUpdate, MessageBirdUpdate, MessengerUpdate, TelegramUpdate, TwilioUpdate, TwitterUpdate, UnityUpdate, ViberUpdate, WebUpdate, WhatsAppUpdate. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AndroidUpdate
        try:
            instance.actual_instance = AndroidUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AppleUpdate
        try:
            instance.actual_instance = AppleUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CustomUpdate
        try:
            instance.actual_instance = CustomUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InstagramUpdate
        try:
            instance.actual_instance = InstagramUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IosUpdate
        try:
            instance.actual_instance = IosUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LineUpdate
        try:
            instance.actual_instance = LineUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MailgunUpdate
        try:
            instance.actual_instance = MailgunUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MessageBirdUpdate
        try:
            instance.actual_instance = MessageBirdUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MessengerUpdate
        try:
            instance.actual_instance = MessengerUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TelegramUpdate
        try:
            instance.actual_instance = TelegramUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TwilioUpdate
        try:
            instance.actual_instance = TwilioUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TwitterUpdate
        try:
            instance.actual_instance = TwitterUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UnityUpdate
        try:
            instance.actual_instance = UnityUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ViberUpdate
        try:
            instance.actual_instance = ViberUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebUpdate
        try:
            instance.actual_instance = WebUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WhatsAppUpdate
        try:
            instance.actual_instance = WhatsAppUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into IntegrationUpdate with oneOf schemas: AndroidUpdate, AppleUpdate, CustomUpdate, InstagramUpdate, IosUpdate, LineUpdate, MailgunUpdate, MessageBirdUpdate, MessengerUpdate, TelegramUpdate, TwilioUpdate, TwitterUpdate, UnityUpdate, ViberUpdate, WebUpdate, WhatsAppUpdate. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into IntegrationUpdate with oneOf schemas: AndroidUpdate, AppleUpdate, CustomUpdate, InstagramUpdate, IosUpdate, LineUpdate, MailgunUpdate, MessageBirdUpdate, MessengerUpdate, TelegramUpdate, TwilioUpdate, TwitterUpdate, UnityUpdate, ViberUpdate, WebUpdate, WhatsAppUpdate. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AndroidUpdate, AppleUpdate, CustomUpdate, InstagramUpdate, IosUpdate, LineUpdate, MailgunUpdate, MessageBirdUpdate, MessengerUpdate, TelegramUpdate, TwilioUpdate, TwitterUpdate, UnityUpdate, ViberUpdate, WebUpdate, WhatsAppUpdate]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


